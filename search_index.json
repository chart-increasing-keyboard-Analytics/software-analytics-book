[
["index.html", "A Literature Survey of Software Analytics Chapter 1 Preamble 1.1 License", " A Literature Survey of Software Analytics Moritz Beller, IN4334 2018 TU Delft 2018-09-20 Chapter 1 Preamble The book you see in front of you is the outcome of an eight week seminar run by the Software Engineering Research Group (SERG) at TU Delft. We have split up the novel area of Software Analytics into several sub topics. Every chapter addresses one such sub-topic of Software Analytics and is the outcome of a systematic literature review a laborious team of 3-4 students performed. With this book, we hope to structure the new field of Software Analytics and show how it is related to many long existing research fields. Moritz Beller 1.1 License This book is copyrighted 2018 by TU Delft and its respective authors and distributed under a CC BY-NC-SA 4.0 license "],
["a-contemporary-view-on-software-analytics.html", "Chapter 2 A contemporary view on Software Analytics 2.1 What is Software Analytics? 2.2 A list of Software Analytics Sub-Topics", " Chapter 2 A contemporary view on Software Analytics 2.1 What is Software Analytics? 2.2 A list of Software Analytics Sub-Topics "],
["sample-sub-topic.html", "Chapter 3 Sample Sub-Topic", " Chapter 3 Sample Sub-Topic This is an example for the deliverable every group works on. Every group works on one independent chapter (starting as one Rmd file). "],
["final-words.html", "Chapter 4 Final Words", " Chapter 4 Final Words We have finished a nice book on Software Analytics. "],
["references.html", "References", " References "],
["build-analytics.html", "Chapter 5 Build analytics 5.1 Background 5.2 Research Questions 5.3 Search Strategy 5.4 Study Selection 5.5 Summary of papers", " Chapter 5 Build analytics 5.1 Background When building a project from source code to executables everything should go smoothly. This is not always the case, a build can break for several reasons. This chapter will give an overview of research done on build scripts and continuous integration. 5.2 Research Questions What are causes of a broken build? With which goals is continuous integration applied? What can be used to effectively fix a broken build? 5.3 Search Strategy Using the initial seed consisting of Bird and Zimmermann (2017), Beller, Gousios, and Zaidman (2017a), Rausch et al. (2017), Beller, Gousios, and Zaidman (2017b), Pinto and Rebouças (2018), Zhao et al. (2017), Widder et al. (2018) and Hilton et al. (2016) we used references and similar keywords to find new papers to analyze. 5.4 Study Selection Through this we found the following papers 5.5 Summary of papers 5.5.1 Bird and Zimmermann (2017) This is a US patent grant for a method of predicting software build errors. This patent is owned by Microsoft. Using logistic regression a prediction can be made on the probability of a build failing. Using this method build errors can be better anticipated, which decreases the time until the build works again. 5.5.2 Beller, Gousios, and Zaidman (2017a) This paper explores data from Travis CI1 on a large scale by analyzing 2,640,825 build logs of Java and Ruby builds. It uses TravisTorrent as a data source. It is found that the number one reason for failing builds it test failure. It also explores differences in testing between Java and Ruby. 5.5.3 Rausch et al. (2017) A stuy on the build results of 14 open source software Java projects. It is similar to Beller, Gousios, and Zaidman (2017a), albeit on a smaller scale. It does go more in depth on the result and changes over time. 5.5.4 Beller, Gousios, and Zaidman (2017b) This paper introduces TravisTorrent, a dataset containing analyzed builds from more than 1,000 projects. This data is freely downloadable from the internet. It uses GHTorrent to link the information from travis to commits on GitHub. 5.5.5 Pinto and Rebouças (2018) This paper is a survey amongst Travis CI users. It found that users are not sure whether a job failure represents a failure or not, that inadequate testing is the most common (technical) reason for build breakage and that people feel that there is a false sense of confidence when blindly trusing tests. 5.5.6 Zhao et al. (2017) This paper analyzed approximately 160,000 projects written in seven different programming languages. It notes that adoption of CI is often part of a reorganization. It collected information on the differences before and after adoption of CI. There is also a survey amongst developers to learn about their experiences in adopting Travis CI. 5.5.7 Widder et al. (2018) This paper analyzes what factors have impact on abandonment of Travis. They find that increased build complexity reduces the chance of abandonment, but larger projects abandon at a higher rate and that a project’s language has significant but varying effect. A surprising result is that metrics of configuration attempts and knowledge dispersion in the project don’t affect the rate of abandonment. 5.5.8 Hilton et al. (2016) This paper explores which CI system developers use, how developers use CI and why developers use CI. For this it analyzes data from Github, Travis CI and it conducts a developer survey. It finds that projects using CI release twice as often, accept pull requests faster and have developers who are less worried about breaking the build. 5.5.9 Vassallo et al. (2017) This paper discusses the difference in failures on continuous integration between open source software (OSS) and industrial software projects. For this 349 Java OSS projects and 418 project from ING Nederland, a financial organization. Using cluser analysis it was observed that both kinds of projects share similar build failures, but in other cases very different patterns emerge. 5.5.10 Hassan and Wang (2018) This paper uses TravisTorrent (Beller, Gousios, and Zaidman (2017b)) to show that 22% of code commits include changes in build script files to keep the build working or to fix the build. In the paper a tool is proposed to automatically fix build failures based on previous changes. 5.5.11 Vassallo et al. (2018) This paper proposes a tool called BART to help developers fix build errors. This tool eliminates the need to browse error logs which can be very long by generating a summary of the failure with useful information. 5.5.12 Zampetti et al. (2017) This paper studies the usage of static analysis tools in 20 Java open source software projects hosted on GitHub and using Travic CI as continuous integration infrastructure. There is investigated which tools are being used, what types of issues make the build fail or raise warnings and how is responded to broken builds. "]
]
